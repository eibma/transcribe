#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Frederik Elwert <frederik.elwert@web.de>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import datetime
import gobject
gobject.threads_init()
import gtk

import locale
locale.setlocale(locale.LC_ALL, '')
import gettext
from gettext import gettext as _
gettext.textdomain('transcribe')

import dbus
from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

# optional Launchpad integration
# this shouldn't crash if not found as it is simply used for bug reporting
try:
    import LaunchpadIntegration
    launchpad_available = True
except:
    launchpad_available = False

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'transcribe'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from transcribe import (
    AboutTranscribeDialog, PreferencesTranscribeDialog, SkiptoDialog)
from transcribe.helpers import (get_builder, get_data_file,
                                time_to_ns, ns_to_time, trim,
                                uri_to_filepath, filepath_to_uri)
from transcribe.player import TranscribePlayer, QueryError
from transcribe.fileinfo import FileInfo

# TODO: Make these configurable
JUMP_BACK_INTERVAL = datetime.time(second=2)
JUMP_BACK = True
SEEK_INTERVAL = datetime.time(second=5)
TIMESTAMP_FORMAT = "%s" # allows formats like "[%s]", "<%s>", etc.


class TranscribeWindow(gtk.Window):
    __gtype_name__ = "TranscribeWindow"
    
    # To construct a new instance of this method, the following notable 
    # methods are called in this order:
    # __new__(cls)
    # __init__(self)
    # finish_initializing(self, builder)
    # __init__(self)
    #
    # For this reason, it's recommended you leave __init__ empty and put
    # your inialization code in finish_intializing
    
    def __new__(cls):
        """Special static method that's automatically called by Python when 
        constructing a new instance of this class.
        
        Returns a fully instantiated TranscribeWindow object.
        """
        builder = get_builder('TranscribeWindow')
        new_object = builder.get_object("transcribe_window")
        new_object.finish_initializing(builder)
        return new_object
        
    def finish_initializing(self, builder):
        """Called while initializing this instance in __new__

        finish_initalizing should be called after parsing the UI definition
        and creating a TranscribeWindow object with it in order to finish
        initializing the start of the new TranscribeWindow instance.
        
        Put your initilization code in here and leave __init__ undefined.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)
        
        actions = gtk.ActionGroup('Actions')
        actions.add_actions((('menu_file', None, _('_File')),
                             ('menu_playback', None, _('_Playback')),
                             ('menu_help', None, _('_Help')),
                             
                             ('open', gtk.STOCK_OPEN, None,
                              '<Ctrl>o', None, self.open),
                             ('copy_position', None, _('_Copy position'),
                              '<Ctrl>c', None, self.copy_position),
                             #('open_recent', None, _('Open _Recent')),
                             ('quit', gtk.STOCK_QUIT, None,
                              '<Ctrl>q', None, self.quit),
                              
                             ('slower', None, _('Slower'),
                              '<Ctrl>s', None, self.change_speed),
                             ('faster', None, _('Faster'),
                              '<Ctrl>f', None, self.change_speed),
                             ('forward', gtk.STOCK_MEDIA_FORWARD, None,
                              None, None, self.forward),
                             ('rewind', gtk.STOCK_MEDIA_REWIND, None,
                              None, None, self.rewind),
                             ('skip', None, _('Skip to â€¦'),
                              '<Ctrl>k', None, self.skip_to),
                              
                             ('about', gtk.STOCK_ABOUT, None,
                              None, None, self.about)
                             ))
        self.play_action = gtk.ToggleAction('play', None, None, 
                                            gtk.STOCK_MEDIA_PLAY)
        self.play_action.connect_proxy(self.builder.get_object('button_play'))
        self.play_action.connect('activate', self.play)
        actions.add_action(self.play_action)
        self.forward_action = actions.get_action('forward')
        self.forward_action.connect_proxy(
                self.builder.get_object('button_seek_forward'))
        self.rewind_action = actions.get_action('rewind')
        self.rewind_action.connect_proxy(
                self.builder.get_object('button_seek_back'))
        
        recent_action = gtk.RecentAction('open_recent', _('_Recent files'),
                                         None, None)
        recent_filter = gtk.RecentFilter()
        recent_filter.add_mime_type('audio/*')
        recent_action.add_filter(recent_filter)
        recent_action.set_filter(recent_filter)
        recent_action.set_sort_type(gtk.RECENT_SORT_MRU)
        recent_action.connect('item-activated', self.open_recent)
        actions.add_action(recent_action)
        
        self.ui = gtk.UIManager()
        self.add_accel_group(self.ui.get_accel_group())
        self.ui.insert_action_group(actions)
        self.ui.add_ui_from_file(get_data_file('ui', 'TranscribeMenu.ui'))
        vbox = self.builder.get_object('vbox1')
        menubar = self.ui.get_widget('/menubar_main')
        vbox.pack_start(menubar)
        vbox.reorder_child(menubar, 0)

        global launchpad_available
        if launchpad_available:
            # see https://wiki.ubuntu.com/UbuntuDevelopment/Internationalisation/Coding for more information
            # about LaunchpadIntegration
            helpmenu = self.ui.get_widget('/menubar_main/menu_help')
            if helpmenu:
                LaunchpadIntegration.set_sourcepackagename('transcribe')
                LaunchpadIntegration.add_items(helpmenu.get_submenu(),
                                               0, False, True)
            else:
                launchpad_available = False

        # Uncomment the following code to read in preferences at start up.
        #dlg = PreferencesTranscribeDialog.PreferencesTranscribeDialog()
        #self.preferences = dlg.get_preferences()

        # Code for other initialization actions should be added here.
        self.player = TranscribePlayer()
        self.player.connect('ready', self.on_file_ready)
        self.player.connect('ended', self.on_file_ended)
        
        self.recent_manager = gtk.recent_manager_get_default()
        
        self.speedscale = self.builder.get_object('scale_speed')
        self.speedscale.set_value(1)
        self.slider = self.builder.get_object('scale_position')
        self.seekscale = self.builder.get_object('scale_seek')
        
        self.dur_label = self.builder.get_object('label_duration')
        self.pos_label = self.builder.get_object('label_position')
        self.time_str = '00:00.0'
        self.dur_label.set_text(self.time_str)
        self.pos_label.set_text(self.time_str)
        
        self.oldstate = None
        self.seeking = False
        self.exact_seeking = True
        self._update_id = None
        
        try:
            session_bus = dbus.SessionBus()
            settings_daemon_proxy = session_bus.get_object(
                                    'org.gnome.SettingsDaemon',
                                    '/org/gnome/SettingsDaemon/MediaKeys')
            self.settings_daemon = dbus.Interface(settings_daemon_proxy, 
                                   'org.gnome.SettingsDaemon.MediaKeys')
            self.settings_daemon.GrabMediaPlayerKeys('Transcribe', 0)
        except dbus.DBusException:
            self.settings_daemon = None
        else:
            self.settings_daemon.connect_to_signal('MediaPlayerKeyPressed',
                                                   self.on_media_key)
            self.connect('focus-in-event', self.on_focus)
        
        if filepath:
            # Open a file passed as commandline parameter.
            # Use idle_add so window is settled.
            gobject.idle_add(self.open_file, filepath)
            
    def _get_update_ui(self):
        return self._update_id is not None
        
    def _set_update_ui(self, update):
        if update:
            self._update_id = gobject.timeout_add(50, self.play_loop)
        else:
            try:
                gobject.source_remove(self._update_id)
            except TypeError:
                # source no longer available, do nothing
                pass
            self._update_id = None
            
    update_ui = property(_get_update_ui, _set_update_ui)

    def about(self, widget, data=None):
        """Display the about box for transcribe."""
        about = AboutTranscribeDialog.AboutTranscribeDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for transcribe."""
        prefs = PreferencesTranscribeDialog.PreferencesTranscribeDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            # Make any updates based on changed preferences here.
            pass
        prefs.destroy()
        
    def open(self, action):
        open_dlg = gtk.FileChooserDialog(_('Open Audio File'), self,
                                         gtk.FILE_CHOOSER_ACTION_OPEN,
                                         (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                          gtk.STOCK_OK, gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name(_('All Audio Files'))
        filter.add_mime_type('audio/*')
        open_dlg.add_filter(filter)
        open_dlg.set_filter(filter)
        result = open_dlg.run()
        if result == gtk.RESPONSE_OK:
            self.open_file(open_dlg.get_filename())
        open_dlg.destroy()
        
    def open_recent(self, item):
        uri = item.get_current_uri()
        path = uri_to_filepath(uri)
        self.open_file(path)
        
    def open_file(self, filepath):
        self.play_action.set_active(False)
        self.slider.set_value(0)
        self.recent_manager.add_item(filepath_to_uri(filepath))
        self.player.open(filepath)
            
    def on_file_ready(self, signal, filepath):
        logging.debug('received signal "ready"')
        gobject.idle_add(self.update_file, filepath)
        
    def update_file(self, filepath):
        fileinfo = FileInfo(filepath)
        if fileinfo.position:
            logging.debug('Resuming at position %sns' % fileinfo.position)
            self.player.position = fileinfo.position
        if fileinfo.speed:
            logging.debug('Resuming with speed %s' % fileinfo.speed)
            self.speedscale.set_value(fileinfo.speed)
        duration = ns_to_time(self.player.duration)
        try:
            position = ns_to_time(self.player.position)
        except QueryError:
            position = datetime.time()
        if duration.hour:
            self.time_str = '%H:%M:%S.%f'
        else:
            self.time_str = '%M:%S.%f'
        dur_str = trim(duration.strftime(self.time_str))
        self.dur_label.set_text(dur_str)
        filename = os.path.basename(filepath)
        self.set_title(u'Transcribe \u2013 %s' % filename)
        gobject.idle_add(self.play_loop)
        
    def on_file_ended(self, signal):
        logging.debug('received signal "ended"')
        self.update_ui = False
        self.play_action.set_active(False)
        
    def on_media_key(self, application, key):
        logging.debug('Received media key %s for %s' % (key, application))
        if application == 'Transcribe':
            if key == 'Play':
                self.play_action.activate()
            elif key in ('Stop', 'Pause'):
                self.play_action.set_active(False)
            elif key == 'Next':
                self.forward(None)
            elif key == 'Previous':
                self.rewind(None)
                
    def on_focus(self, widget, event):
        if self.settings_daemon:
            self.settings_daemon.GrabMediaPlayerKeys('Transcribe', 0)
        
    def play(self, action):
        logging.debug('play action triggered')
        if action.get_active():
            self.player.play()
            self.update_ui = True
        else:
            self.update_ui = False
            self.player.pause()
            if JUMP_BACK:
                interval = time_to_ns(JUMP_BACK_INTERVAL)
                newpos = self.player.position - interval
                if newpos < 0:
                    newpos = 0
                self.player.position = newpos
                self.play_loop()
            fileinfo = FileInfo(self.player.filename)
            try:
                fileinfo.position = self.player.position
            except QueryError:
                # position cannot be found out
                # so do nothing until we find a better way
                # to deal with QueryErrors
                logging.warn('query failed, cannot save current position')
                pass
    
    def play_loop(self):
        try:
            position = self.player.position
            duration = self.player.duration
        except QueryError:
            return False
        frac = float(position) / float(duration)
        scalepos = frac * self.slider.get_adjustment().get_upper()
        self.slider.set_value(scalepos)
        pos_str = trim(ns_to_time(position).strftime(self.time_str))
        self.pos_label.set_text(pos_str)
        return True
        
    def change_speed(self, action):
        if action.get_name() == 'slower':
            self.speedscale.set_value(self.speedscale.get_value() - 0.1)
        else:
            self.speedscale.set_value(self.speedscale.get_value() + 0.1)
        
    def forward(self, action):
        new_position = self.player.position + time_to_ns(SEEK_INTERVAL)
        if new_position > self.player.duration:
            new_position = self.player.duration
        self.player.position = new_position
        gobject.idle_add(self.play_loop)
        
    def rewind(self, action):
        new_position = self.player.position - time_to_ns(SEEK_INTERVAL)
        if new_position < 0:
            new_position = 0
        self.player.position = new_position
        gobject.idle_add(self.play_loop)
        
    def copy_position(self, action):
        position = self.player.position
        pos_str = trim(ns_to_time(position).strftime(self.time_str))
        clipboard = gtk.clipboard_get()
        clipboard.set_text(TIMESTAMP_FORMAT % pos_str)
    
    def skip_to(self, action):
        skip_dlg = SkiptoDialog.SkiptoDialog()
        skip_dlg.time_format = self.time_str
        skip_dlg.spinbutton.set_range(0, self.player.duration)
        page = time_to_ns(datetime.time(second=1))
        skip_dlg.spinbutton.set_increments(page / 10, page)
        skip_dlg.spinbutton.set_value(self.player.position)
        response = skip_dlg.run()
        if response == gtk.RESPONSE_OK:
            self.player.position = int(skip_dlg.spinbutton.get_value())
            gobject.idle_add(self.play_loop)
        skip_dlg.destroy()
        
    def on_scale_speed_format_value(self, widget, value, data=None):
        return u'%s\xd7' % locale.format('%.1f', value)
        
    def on_scale_speed_value_changed(self, range):
        value = range.get_value()
        if value != self.player.rate:
            self.player.rate = value
            fileinfo = FileInfo(self.player.filename)
            fileinfo.speed = value
            
    def on_scale_position_value_changed(self, range):
        if not self.seeking:
            # Slider changed programmatically, do nothing
            return
        value = range.get_value()
        max_value = self.slider.get_adjustment().get_upper()
        new_position = self.player.duration * (value/max_value)
        self.player.position = new_position
        
    def on_scale_position_button_press_event(self, widget, event):
        logging.debug('Begin seeking')
        self.oldstate = self.player.state
        self.player.pause()
        self.seeking = True
        self.update_ui = True
        
    def on_scale_position_button_release_event(self, widget, event):
        logging.debug('End seeking')
        self.seeking = False
        self.player.state = self.oldstate
        if not self.player.playing:
            self.update_ui = False

    def on_scale_seek_button_press_event(self, widget, event):
        logging.debug('Begin exact seeking')
        self.oldstate = self.player.state
        self.player.pause()
        self.exact_seeking = True
        self.update_ui = True
        gobject.timeout_add(50, self.seek_loop)
        
    def on_scale_seek_button_release_event(self, widget, event):
        logging.debug('End exact seeking')
        self.exact_seeking = False
        self.player.state = self.oldstate
        if not self.player.playing:
            self.update_ui = False
        gobject.idle_add(self.seekscale.set_value, 0)
        
    def seek_loop(self):
        seekvalue = self.seekscale.get_value()
        if seekvalue != 0:
            oldpos = self.player.position
            self.player.position = oldpos + seekvalue * 100000000
        return self.exact_seeking
        
    def on_volumebutton_value_changed(self, scalebutton, value):
        self.player.volume = value
        
    def quit(self, widget, data=None):
        """Signal handler for closing the TranscribeWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the TranscribeWindow is closed."""
        # Clean up code for saving application state should be added here.
        if self.player.filename:
            fileinfo = FileInfo(self.player.filename)
            fileinfo.position = self.player.position
            fileinfo.speed = self.player.rate
        if self.settings_daemon:
            self.settings_daemon.ReleaseMediaPlayerKeys('Transcribe')
        gtk.main_quit()

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    # Run the application.
    filepath = None
    if args and os.path.isfile(args[0]):
        filepath = args[0]
    window = TranscribeWindow()
    window.show()
    gtk.main()
