#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Frederik Elwert <frederik.elwert@web.de>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import gtk

import locale
locale.setlocale(locale.LC_ALL, '')
import gettext
from gettext import gettext as _
gettext.textdomain('transcribe')

# optional Launchpad integration
# this shouldn't crash if not found as it is simply used for bug reporting
try:
    import LaunchpadIntegration
    launchpad_available = True
except:
    launchpad_available = False

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'transcribe'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from transcribe import (
    AboutTranscribeDialog, PreferencesTranscribeDialog)
from transcribe.helpers import get_builder, get_data_file


class TranscribeWindow(gtk.Window):
    __gtype_name__ = "TranscribeWindow"
    
    # To construct a new instance of this method, the following notable 
    # methods are called in this order:
    # __new__(cls)
    # __init__(self)
    # finish_initializing(self, builder)
    # __init__(self)
    #
    # For this reason, it's recommended you leave __init__ empty and put
    # your inialization code in finish_intializing
    
    def __new__(cls):
        """Special static method that's automatically called by Python when 
        constructing a new instance of this class.
        
        Returns a fully instantiated TranscribeWindow object.
        """
        builder = get_builder('TranscribeWindow')
        new_object = builder.get_object("transcribe_window")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        """Called while initializing this instance in __new__

        finish_initalizing should be called after parsing the UI definition
        and creating a TranscribeWindow object with it in order to finish
        initializing the start of the new TranscribeWindow instance.
        
        Put your initilization code in here and leave __init__ undefined.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)
        
        actions = gtk.ActionGroup('Actions')
        actions.add_actions((('menu_file', None, _('_File')),
                             ('menu_playback', None, _('_Playback')),
                             ('menu_help', None, _('_Help')),
                             
                             ('open', gtk.STOCK_OPEN, None,
                              '<Ctrl>o', None, self.open),
                             ('open_recent', None, _('Open _Recent')),
                             ('quit', gtk.STOCK_QUIT, None,
                              '<Ctrl>q', None, self.quit),
                              
                             ('slower', None, _('Slower'),
                              '<Ctrl>s', None, self.change_speed),
                             ('faster', None, _('Faster'),
                              '<Ctrl>f', None, self.change_speed),
                             ('skip', None, _('Skip to â€¦'),
                              '<Ctrl>k', None, self.skip_to),
                              
                             ('about', gtk.STOCK_ABOUT, None,
                              None, None, self.about)
                             ))
        play_action = gtk.ToggleAction('play', None, None, 
                                       gtk.STOCK_MEDIA_PLAY)
        play_action.connect_proxy(self.builder.get_object('button_play'))
        play_action.connect('activate', self.play)
        actions.add_action(play_action)
        
        self.ui = gtk.UIManager()
        self.add_accel_group(self.ui.get_accel_group())
        self.ui.insert_action_group(actions)
        self.ui.add_ui_from_file(get_data_file('ui', 'TranscribeMenu.ui'))
        vbox = self.builder.get_object('vbox1')
        menubar = self.ui.get_widget('/menubar_main')
        vbox.pack_start(menubar)
        vbox.reorder_child(menubar, 0)

        global launchpad_available
        if launchpad_available:
            # see https://wiki.ubuntu.com/UbuntuDevelopment/Internationalisation/Coding for more information
            # about LaunchpadIntegration
            helpmenu = self.ui.get_widget('/menubar_main/menu_help')
            if helpmenu:
                LaunchpadIntegration.set_sourcepackagename('transcribe')
                LaunchpadIntegration.add_items(helpmenu.get_submenu(),
                                               0, False, True)
            else:
                launchpad_available = False

        # Uncomment the following code to read in preferences at start up.
        #dlg = PreferencesTranscribeDialog.PreferencesTranscribeDialog()
        #self.preferences = dlg.get_preferences()

        # Code for other initialization actions should be added here.
        speedscale = self.builder.get_object('scale_speed')
        speedscale.set_value(1)

    def about(self, widget, data=None):
        """Display the about box for transcribe."""
        about = AboutTranscribeDialog.AboutTranscribeDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for transcribe."""
        prefs = PreferencesTranscribeDialog.PreferencesTranscribeDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            # Make any updates based on changed preferences here.
            pass
        prefs.destroy()
        
    def open(self, action):
        pass
        
    def play(self, action):
        logging.debug('play action triggered')
        
    def change_speed(self, action):
        pass
        
    def skip_to(self, action):
        pass
        
    def on_scale_speed_format_value(self, widget, value, data=None):
        return u'%s\xd7' % locale.format('%.1f', value)

    def quit(self, widget, data=None):
        """Signal handler for closing the TranscribeWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the TranscribeWindow is closed."""
        # Clean up code for saving application state should be added here.
        gtk.main_quit()

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    # Run the application.
    window = TranscribeWindow()
    window.show()
    gtk.main()
